/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DFS.Graph;
import DFS.Graph.Neighbor;
import DFS.Graph.Vertex;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author Phat
 */
public class view2 extends javax.swing.JFrame {

    Graphics g;
    Graphics2D g2d;
    int graphWidth = 0, graphHeight = 0;

    boolean isWeightedGraph = false;
    boolean isUndirectedGraph = false;
    boolean isDirectedGraph = false;

    Graph graph;
    char vertexChar = 'A';
    int vertexNum = 1;
    String traversalResult = "";

    Color color1 = new Color(44, 46, 67); //màu xanh lục
    Color color2 = new Color(89, 82, 96); //màu tía tô
    Color color3 = new Color(178, 177, 185); //màu xám tối
    Color color4 = new Color(255, 213, 35); //màu vàng nghệ

    boolean searched = false;

    /**
     * Creates new form view2
     */
    private void drawArrowLine(int x1, int y1, int x2, int y2, Color color) {
        int width = 8;
        int height = 8;
        int dx = x2 - x1, dy = y2 - y1;
        double D = Math.sqrt(dx * dx + dy * dy);
        double xm = D - width, xn = xm, ym = height, yn = -height, x;
        double sin = dy / D, cos = dx / D;

        x = xm * cos - ym * sin + x1;
        ym = xm * sin + ym * cos + y1;
        xm = x;

        x = xn * cos - yn * sin + x1;
        yn = xn * sin + yn * cos + y1;
        xn = x;

        int[] xpoints = {x2, (int) xm, (int) xn};
        int[] ypoints = {y2, (int) ym, (int) yn};
        BasicStroke stroke = new BasicStroke(3.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f);
        g2d.setStroke(stroke);
        g2d.setColor(color);
        g2d.drawLine(x1, y1, x2, y2);
        g2d.fillPolygon(xpoints, ypoints, 3);
    }

    public view2() {
        initComponents();
        g = graphPanel.getGraphics();
        g2d = (Graphics2D) g;
        graphWidth = graphPanel.getWidth();
        graphHeight = graphPanel.getHeight();

        undirected.setSelected(true);
        byName.setSelected(true);
        lock.setSelected(true);

        Border border = new CompoundBorder(null, new EmptyBorder(0, 3, 0, 0));
        vertexA.setBorder(border);
        vertexB.setBorder(border);
        weightNumber.setBorder(border);
        startVertex.setBorder(border);
//        result.setBorder(border);
        console.setBorder(border);
        fromA.setBorder(border);
        toB.setBorder(border);

        this.setLocationRelativeTo(null);
        System.out.println();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphTypeGroup = new javax.swing.ButtonGroup();
        vertexNameInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addVertex = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        vertexNumber = new javax.swing.JTextField();
        vertexType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        graphPanel = new javax.swing.JPanel() {
            public void paintComponent(Graphics g){
                super.paintComponent(g);
            }
        };
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        undirected = new javax.swing.JRadioButton();
        createGraph = new javax.swing.JButton();
        weightedGraph = new javax.swing.JCheckBox();
        filePath = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        openFileExplorer = new javax.swing.JButton();
        directed = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        byNumber = new javax.swing.JRadioButton();
        byName = new javax.swing.JRadioButton();
        lock = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        vertexA = new javax.swing.JTextField();
        vertexB = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        weightNumber = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        addEdge = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        doDFS = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        startVertex = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        fromA = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        toB = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        repaintGraph = new javax.swing.JButton();
        clearGraph = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        writeFile = new javax.swing.JButton();
        graphPanel1 = new javax.swing.JPanel() {
            public void paintComponent(Graphics g){
                super.paintComponent(g);
            }
        };
        jScrollPane3 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        clear2 = new javax.swing.JButton();
        clear3 = new javax.swing.JButton();

        vertexNameInput.setEditable(false);
        vertexNameInput.setBackground(new java.awt.Color(44, 46, 67));
        vertexNameInput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vertexNameInput.setForeground(new java.awt.Color(255, 213, 35));
        vertexNameInput.setBorder(null);
        vertexNameInput.setInheritsPopupMenu(true);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(178, 177, 185));
        jLabel4.setText("Tên đỉnh");

        addVertex.setBackground(new java.awt.Color(255, 213, 35));
        addVertex.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addVertex.setForeground(new java.awt.Color(44, 46, 67));
        addVertex.setText("Thêm");
        addVertex.setBorder(null);
        addVertex.setContentAreaFilled(false);
        addVertex.setEnabled(false);
        addVertex.setOpaque(true);
        addVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVertexActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(178, 177, 185));
        jLabel3.setText("Số đỉnh");

        vertexNumber.setEditable(false);
        vertexNumber.setBackground(new java.awt.Color(44, 46, 67));
        vertexNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vertexNumber.setForeground(new java.awt.Color(255, 213, 35));
        vertexNumber.setBorder(null);
        vertexNumber.setInheritsPopupMenu(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Đồ thị DFS");
        setBackground(new java.awt.Color(113, 111, 129));

        jPanel1.setBackground(new java.awt.Color(44, 46, 67));

        graphPanel.setBackground(new java.awt.Color(134, 117, 169));
        graphPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 5));
        graphPanel.setToolTipText("");
        graphPanel.setOpaque(false);
        graphPanel.setPreferredSize(new java.awt.Dimension(700, 800));
        graphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 996, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );

        jPanel2.setOpaque(false);
        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setVerifyInputWhenFocusTarget(false);
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel5.setOpaque(false);
        jPanel5.setRequestFocusEnabled(false);
        jPanel5.setVerifyInputWhenFocusTarget(false);
        jPanel5.setLayout(new java.awt.GridLayout(1, 5, 5, 0));

        jPanel6.setBackground(new java.awt.Color(89, 82, 96));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 2));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 213, 35));
        jLabel1.setText("KHỞI TẠO");

        undirected.setBackground(new java.awt.Color(178, 177, 185));
        graphTypeGroup.add(undirected);
        undirected.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        undirected.setForeground(new java.awt.Color(178, 177, 185));
        undirected.setText("Vô hướng");
        undirected.setFocusable(false);
        undirected.setOpaque(false);
        undirected.setRequestFocusEnabled(false);
        undirected.setRolloverEnabled(false);
        undirected.setVerifyInputWhenFocusTarget(false);

        createGraph.setBackground(new java.awt.Color(255, 213, 35));
        createGraph.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        createGraph.setForeground(new java.awt.Color(44, 46, 67));
        createGraph.setText("Khởi tạo");
        createGraph.setContentAreaFilled(false);
        createGraph.setOpaque(true);
        createGraph.setVerifyInputWhenFocusTarget(false);
        createGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGraphActionPerformed(evt);
            }
        });

        weightedGraph.setBackground(new java.awt.Color(178, 177, 185));
        weightedGraph.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        weightedGraph.setForeground(new java.awt.Color(178, 177, 185));
        weightedGraph.setText("Trọng số");
        weightedGraph.setFocusable(false);
        weightedGraph.setOpaque(false);
        weightedGraph.setRequestFocusEnabled(false);
        weightedGraph.setRolloverEnabled(false);
        weightedGraph.setVerifyInputWhenFocusTarget(false);

        filePath.setEditable(false);
        filePath.setBackground(new java.awt.Color(44, 46, 67));
        filePath.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        filePath.setForeground(new java.awt.Color(255, 213, 35));
        filePath.setBorder(null);
        filePath.setInheritsPopupMenu(true);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(178, 177, 185));
        jLabel12.setText("Đọc file");

        openFileExplorer.setBackground(new java.awt.Color(255, 213, 35));
        openFileExplorer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        openFileExplorer.setForeground(new java.awt.Color(44, 46, 67));
        openFileExplorer.setText("...");
        openFileExplorer.setBorder(null);
        openFileExplorer.setContentAreaFilled(false);
        openFileExplorer.setOpaque(true);
        openFileExplorer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileExplorerActionPerformed(evt);
            }
        });

        directed.setBackground(new java.awt.Color(178, 177, 185));
        graphTypeGroup.add(directed);
        directed.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        directed.setForeground(new java.awt.Color(178, 177, 185));
        directed.setText("Có hướng");
        directed.setFocusable(false);
        directed.setOpaque(false);
        directed.setRequestFocusEnabled(false);
        directed.setRolloverEnabled(false);
        directed.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel12)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(undirected)
                                .addGap(18, 18, 18)
                                .addComponent(directed))
                            .addComponent(filePath))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openFileExplorer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightedGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(createGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 2, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(undirected)
                    .addComponent(directed)
                    .addComponent(weightedGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(createGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileExplorer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.add(jPanel6);

        jPanel8.setBackground(new java.awt.Color(89, 82, 96));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 2));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 213, 35));
        jLabel2.setText("THÊM ĐỈNH");

        byNumber.setBackground(new java.awt.Color(178, 177, 185));
        vertexType.add(byNumber);
        byNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        byNumber.setForeground(new java.awt.Color(178, 177, 185));
        byNumber.setText("Thứ tự số");
        byNumber.setEnabled(false);
        byNumber.setFocusable(false);
        byNumber.setOpaque(false);
        byNumber.setRequestFocusEnabled(false);
        byNumber.setRolloverEnabled(false);
        byNumber.setVerifyInputWhenFocusTarget(false);

        byName.setBackground(new java.awt.Color(178, 177, 185));
        vertexType.add(byName);
        byName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        byName.setForeground(new java.awt.Color(178, 177, 185));
        byName.setText("Thứ tự chữ cái");
        byName.setEnabled(false);
        byName.setFocusable(false);
        byName.setOpaque(false);
        byName.setRequestFocusEnabled(false);
        byName.setRolloverEnabled(false);
        byName.setVerifyInputWhenFocusTarget(false);

        lock.setBackground(new java.awt.Color(178, 177, 185));
        lock.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lock.setForeground(new java.awt.Color(178, 177, 185));
        lock.setText("Khoá");
        lock.setFocusable(false);
        lock.setOpaque(false);
        lock.setRequestFocusEnabled(false);
        lock.setRolloverEnabled(false);
        lock.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lock, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(byName)
                        .addGap(18, 18, 18)
                        .addComponent(byNumber))
                    .addComponent(jLabel2))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(byName)
                    .addComponent(byNumber))
                .addGap(18, 18, 18)
                .addComponent(lock)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel8);

        jPanel10.setBackground(new java.awt.Color(89, 82, 96));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 2));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 213, 35));
        jLabel6.setText("TẠO CẠNH");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(178, 177, 185));
        jLabel7.setText("Đỉnh A");

        vertexA.setEditable(false);
        vertexA.setBackground(new java.awt.Color(44, 46, 67));
        vertexA.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vertexA.setForeground(new java.awt.Color(255, 213, 35));
        vertexA.setBorder(null);
        vertexA.setInheritsPopupMenu(true);

        vertexB.setEditable(false);
        vertexB.setBackground(new java.awt.Color(44, 46, 67));
        vertexB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vertexB.setForeground(new java.awt.Color(255, 213, 35));
        vertexB.setBorder(null);
        vertexB.setInheritsPopupMenu(true);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(178, 177, 185));
        jLabel8.setText("Đỉnh B");

        weightNumber.setEditable(false);
        weightNumber.setBackground(new java.awt.Color(44, 46, 67));
        weightNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        weightNumber.setForeground(new java.awt.Color(255, 213, 35));
        weightNumber.setBorder(null);
        weightNumber.setInheritsPopupMenu(true);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(178, 177, 185));
        jLabel9.setText("Trọng số");

        addEdge.setBackground(new java.awt.Color(255, 213, 35));
        addEdge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addEdge.setForeground(new java.awt.Color(44, 46, 67));
        addEdge.setText("Tạo cạnh");
        addEdge.setBorder(null);
        addEdge.setContentAreaFilled(false);
        addEdge.setEnabled(false);
        addEdge.setOpaque(true);
        addEdge.setPreferredSize(new java.awt.Dimension(23, 17));
        addEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(addEdge, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vertexA, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(weightNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(vertexB, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(vertexA, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(vertexB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(weightNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addEdge, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel10);

        jPanel11.setBackground(new java.awt.Color(89, 82, 96));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 2));

        doDFS.setBackground(new java.awt.Color(255, 213, 35));
        doDFS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        doDFS.setForeground(new java.awt.Color(44, 46, 67));
        doDFS.setText("Duyệt");
        doDFS.setBorder(null);
        doDFS.setContentAreaFilled(false);
        doDFS.setEnabled(false);
        doDFS.setOpaque(true);
        doDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDFSActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 213, 35));
        jLabel10.setText("DUYỆT / TÌM KIẾM DFS");

        startVertex.setEditable(false);
        startVertex.setBackground(new java.awt.Color(44, 46, 67));
        startVertex.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startVertex.setForeground(new java.awt.Color(255, 213, 35));
        startVertex.setBorder(null);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(178, 177, 185));
        jLabel11.setText("Đỉnh bắt đầu");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(178, 177, 185));
        jLabel14.setText("Đỉnh A");

        fromA.setBackground(new java.awt.Color(44, 46, 67));
        fromA.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fromA.setForeground(new java.awt.Color(255, 213, 35));
        fromA.setBorder(null);
        fromA.setInheritsPopupMenu(true);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(178, 177, 185));
        jLabel13.setText("Đỉnh B");

        toB.setBackground(new java.awt.Color(44, 46, 67));
        toB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        toB.setForeground(new java.awt.Color(255, 213, 35));
        toB.setBorder(null);
        toB.setInheritsPopupMenu(true);

        search.setBackground(new java.awt.Color(255, 213, 35));
        search.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        search.setForeground(new java.awt.Color(44, 46, 67));
        search.setText("Tìm kiếm");
        search.setBorder(null);
        search.setContentAreaFilled(false);
        search.setOpaque(true);
        search.setPreferredSize(new java.awt.Dimension(23, 17));
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(startVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(doDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromA, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toB, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(startVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(fromA, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(toB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.add(jPanel11);

        jPanel2.add(jPanel5);

        jPanel9.setBackground(new java.awt.Color(89, 82, 96));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 2));

        repaintGraph.setBackground(new java.awt.Color(255, 213, 35));
        repaintGraph.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        repaintGraph.setForeground(new java.awt.Color(44, 46, 67));
        repaintGraph.setText("Vẽ lại hình");
        repaintGraph.setBorder(null);
        repaintGraph.setContentAreaFilled(false);
        repaintGraph.setEnabled(false);
        repaintGraph.setOpaque(true);
        repaintGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repaintGraphActionPerformed(evt);
            }
        });

        clearGraph.setBackground(new java.awt.Color(255, 213, 35));
        clearGraph.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clearGraph.setForeground(new java.awt.Color(44, 46, 67));
        clearGraph.setText("Xoá đồ thị");
        clearGraph.setBorder(null);
        clearGraph.setContentAreaFilled(false);
        clearGraph.setEnabled(false);
        clearGraph.setOpaque(true);
        clearGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGraphActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(255, 213, 35));
        clear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clear.setForeground(new java.awt.Color(44, 46, 67));
        clear.setText("Xoá màn hình");
        clear.setBorder(null);
        clear.setContentAreaFilled(false);
        clear.setEnabled(false);
        clear.setOpaque(true);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        writeFile.setBackground(new java.awt.Color(255, 213, 35));
        writeFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeFile.setForeground(new java.awt.Color(44, 46, 67));
        writeFile.setText("Xuất file");
        writeFile.setBorder(null);
        writeFile.setContentAreaFilled(false);
        writeFile.setEnabled(false);
        writeFile.setOpaque(true);
        writeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(repaintGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(writeFile, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(repaintGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(writeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        graphPanel1.setBackground(new java.awt.Color(134, 117, 169));
        graphPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(89, 82, 96), 5));
        graphPanel1.setToolTipText("");
        graphPanel1.setOpaque(false);
        graphPanel1.setPreferredSize(new java.awt.Dimension(700, 800));

        console.setEditable(false);
        console.setBackground(new java.awt.Color(44, 46, 67));
        console.setColumns(20);
        console.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        console.setForeground(new java.awt.Color(255, 213, 35));
        console.setLineWrap(true);
        console.setRows(10);
        console.setTabSize(3);
        console.setBorder(null);
        console.setFocusable(false);
        jScrollPane3.setViewportView(console);

        clear2.setBackground(new java.awt.Color(255, 213, 35));
        clear2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clear2.setForeground(new java.awt.Color(44, 46, 67));
        clear2.setText("Xoá console");
        clear2.setBorder(null);
        clear2.setContentAreaFilled(false);
        clear2.setOpaque(true);
        clear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear2ActionPerformed(evt);
            }
        });

        clear3.setBackground(new java.awt.Color(255, 213, 35));
        clear3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clear3.setForeground(new java.awt.Color(44, 46, 67));
        clear3.setText("In các đỉnh");
        clear3.setBorder(null);
        clear3.setContentAreaFilled(false);
        clear3.setOpaque(true);
        clear3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphPanel1Layout = new javax.swing.GroupLayout(graphPanel1);
        graphPanel1.setLayout(graphPanel1Layout);
        graphPanel1Layout.setHorizontalGroup(
            graphPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graphPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clear3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        graphPanel1Layout.setVerticalGroup(
            graphPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(graphPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clear3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1006, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graphPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addComponent(graphPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ArrayList<String> generateAlphabet(int numberOfVertices) {
        char c;
        int i = 1;
        ArrayList<String> verticals = new ArrayList<>();

        for (c = 'A'; c <= 'Z'; c++) {
            if (i == numberOfVertices) {
                verticals.add(Character.toString(c));
                i++;
            }
        }

        return verticals;
    }

    //Vẽ đỉnh
    public void drawVertex(String vertexName, int x, int y, Color color) {
        BasicStroke stroke = new BasicStroke(3.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f);
        g2d.setStroke(stroke);
        g2d.setColor(color1);
        g2d.fillOval(x, y, 30, 30);
        g2d.setColor(color);
        g2d.drawOval(x, y, 30, 30);

        g2d.setColor(color4);
        g2d.setFont(new Font("Tahoma", Font.PLAIN, 16));
        g2d.drawString(vertexName, x + 10, y + 23);
    }

    //Vẽ đường thẳng
    public void drawLine(int x1, int y1, int x2, int y2, Color color) {
        BasicStroke stroke = new BasicStroke(3.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f);
        g2d.setStroke(stroke);

        g2d.setColor(color);
        g2d.drawLine(x1, y1, x2, y2);
    }

    //Vẽ cạnh
    public void drawEdge(Vertex A, Vertex B, int weightNumber, Color color) {
        if (isDirectedGraph) {
            int x1 = A.x + 20;
            int y1 = A.y + 20;

            int x2 = B.x + 20;
            int y2 = B.y + 20;

            if (x2 > x1 + 50) {
                if (y2 > y1 + 50) {
                    System.out.println("RIGHT BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 4, B.y + 4, color);
                } else if (y2 < y1 - 50) {
                    System.out.println("RIGHT TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 2, B.y + 30, color);
                } else {
                    System.out.println("RIGHT");
                    drawArrowLine(A.x + 20, A.y + 20, B.x, B.y + 20, color);
                }
            } else if (x2 < x1 - 50) {
                if (y2 > y1 + 50) {
                    System.out.println("LEFT BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 6, color);
                } else if (y2 < y1 - 50) {
                    System.out.println("LEFT TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 30, color);
                } else {
                    System.out.println("LEFT");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 20, color);
                }
            } else {
                if (y2 > y1 + 50) {
                    System.out.println("BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 20, B.y, color);
                } else if (y2 < y1 - 100) {
                    System.out.println("TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 20, B.y + 30, color);
                }
            }

            //drawArrowLine(A.x + 20, A.y + 20, B.x, B.y, color);
            drawVertex(A.getName(), A.x, A.y, color);
            drawVertex(B.getName(), B.x, B.y, color);
        } else {
            drawLine(A.x + 20, A.y + 20, B.x + 20, B.y + 20, color);
            drawVertex(A.getName(), A.x, A.y, color);
            drawVertex(B.getName(), B.x, B.y, color);
        }

        if (isWeightedGraph) {
            int x = Math.abs(B.x + A.x) / 2;
            int y = Math.abs(B.y + A.y) / 2;

            g2d.setColor(color3);
            g2d.setFont(new Font("Tahoma", Font.PLAIN, 14));
            g2d.drawString(Integer.toString(weightNumber), x, y);
        }
    }

    //Vẽ cạnh kiểu 2
    public void drawEdge(Vertex A, Vertex B, Color color) {
        if (isDirectedGraph) {
            int x1 = A.x + 20;
            int y1 = A.y + 20;

            int x2 = B.x + 20;
            int y2 = B.y + 20;

            if (x2 > x1 + 100) {
                if (y2 > y1 + 100) {
                    System.out.println("RIGHT BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 4, B.y + 4, color);
                } else if (y2 < y1 - 100) {
                    System.out.println("RIGHT TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 2, B.y + 30, color);
                } else {
                    System.out.println("RIGHT");
                    drawArrowLine(A.x + 20, A.y + 20, B.x, B.y + 20, color);
                }
            } else if (x2 < x1 - 100) {
                if (y2 > y1 + 100) {
                    System.out.println("LEFT BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 6, color);
                } else if (y2 < y1 - 100) {
                    System.out.println("LEFT TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 30, color);
                } else {
                    System.out.println("LEFT");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 30, B.y + 20, color);
                }
            } else {
                if (y2 > y1 + 100) {
                    System.out.println("BOTTOM");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 20, B.y, color);
                } else if (y2 < y1 - 100) {
                    System.out.println("TOP");
                    drawArrowLine(A.x + 20, A.y + 20, B.x + 20, B.y + 30, color);
                }
            }

            //drawArrowLine(A.x + 20, A.y + 20, B.x, B.y, color);
            drawVertex(A.getName(), A.x, A.y, color);
            drawVertex(B.getName(), B.x, B.y, color);
        } else {
            drawLine(A.x + 20, A.y + 20, B.x + 20, B.y + 20, color);
            drawVertex(A.getName(), A.x, A.y, color);
            drawVertex(B.getName(), B.x, B.y, color);
        }
    }

    //vẽ đồ thị
    public void drawGraph() {
        for (int v = 0; v < graph.vertexList.size(); v++) {
            Vertex A = graph.vertexList.get(v);
            drawVertex(A.getName(), A.x, A.y, color3);
            LinkedList<Neighbor> neighborList = graph.vertexList.get(v).adjList;
            for (int i = 0; i < neighborList.size(); i++) {
                Vertex B = graph.vertexList.get(neighborList.get(i).vertexNum);
                drawEdge(A, B, neighborList.get(i).weightNum, color3);

            }
        }
    }

    //Những chức năng sẽ sử dụng được sau khi khởi tạo đồ thị
    public void setEnable() {
        graphPanel.setEnabled(true);
        byName.setEnabled(true);
        byNumber.setEnabled(true);
        addEdge.setEnabled(true);
        doDFS.setEnabled(true);
        clearGraph.setEnabled(true);
        repaintGraph.setEnabled(true);
        clear.setEnabled(true);
        writeFile.setEnabled(true);

        vertexA.setEditable(true);
        vertexB.setEditable(true);
        startVertex.setEditable(true);

        if (isDirectedGraph) {
            undirected.setSelected(false);
            directed.setSelected(true);
        } else {
            undirected.setSelected(true);
            directed.setSelected(false);
        }

        if (isWeightedGraph) {
            weightedGraph.setSelected(true);
            weightNumber.setEditable(true);
        } else {
            weightedGraph.setSelected(false);
        }

    }

    private void addVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVertexActionPerformed
        // TODO add your handling code here:
        String vertexName = vertexNameInput.getText();
        //drawVertex(vertexName);
    }//GEN-LAST:event_addVertexActionPerformed

    private void graphPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseClicked
        // TODO add your handling code here:
        //Nếu chưa khởi tạo graph thì không cho click
        if (graph == null) {
            return;
        }

        if (lock.isSelected()) {
            return;
        }

        if (byName.isSelected()) {
            drawVertex(Character.toString(this.vertexChar), evt.getX(), evt.getY(), color3);
//        System.out.println("Vertex{" + "name=" + Character.toString(this.vertexChar) + ", x=" + evt.getX() + ", y=" + evt.getY() + '}');
            graph.addVertex(Character.toString(this.vertexChar), evt.getX(), evt.getY());
            this.vertexChar++;
        } else if (byNumber.isSelected()) {
            drawVertex(Integer.toString(this.vertexNum), evt.getX(), evt.getY(), color3);
            graph.addVertex(Integer.toString(this.vertexNum), evt.getX(), evt.getY());
            this.vertexNum++;
        }

    }//GEN-LAST:event_graphPanelMouseClicked

    private void clearGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGraphActionPerformed
        // TODO add your handling code here:

        int choosen = JOptionPane.showConfirmDialog(null, "Tất cả thông tin trong đồ thị sẽ mất hết. Bạn có muốn tiếp tục?", "Xoá đồ thị", 0);
        if (choosen == JOptionPane.NO_OPTION) {
            return;
        }

        vertexChar = 'A';
        vertexNum = 1;
        graph.vertexList.clear();
        graphPanel.repaint();
    }//GEN-LAST:event_clearGraphActionPerformed

    private void createGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGraphActionPerformed
        // TODO add your handling code here:
        if (undirected.isSelected()) { //Đồ thị là vô hướng
            isUndirectedGraph = true;
            isDirectedGraph = false;
        } else { //Đồ thị là có hướng
            isUndirectedGraph = false;
            isDirectedGraph = true;
        }

        if (weightedGraph.isSelected()) { //Đồ thị kèm trọng số
            isWeightedGraph = true;
        }

        graph = new Graph(isDirectedGraph, isWeightedGraph); //Khởi tạo đồ thị

        //sau khi khởi tạo đồ thị thì sẽ mở khoá các chức năng
        setEnable();
//        String[] s = {"a", "b", "c", "d", "e", "f", "g", "h", "i"};
//        
//        
//Vertex{name=A, x=228, y=50}
//Vertex{name=B, x=475, y=50}
//Vertex{name=C, x=147, y=180}
//Vertex{name=D, x=336, y=154}
//Vertex{name=E, x=392, y=298}
//Vertex{name=F, x=249, y=374}
//Vertex{name=G, x=387, y=477}
//Vertex{name=H, x=750, y=97}
//Vertex{name=I, x=686, y=201}
//        graph.addVertex("A", 228, 50);
//        graph.addVertex("B", 475, 50);
//        graph.addVertex("C", 147, 180);
//        graph.addVertex("D", 336, 154);
//        graph.addVertex("E", 392, 298);
//        graph.addVertex("F", 249, 374);
//        graph.addVertex("G", 387, 477);
//        graph.addVertex("H", 750, 97);
//        graph.addVertex("I", 686, 201);
//        graph.addEdge("A", "B");
//        graph.addEdge("C", "A");
//        graph.addEdge("E", "F");
//        graph.addEdge("B", "E");
//
//        graph.addEdge("B", "I");
//        graph.addEdge("H", "B");
//
//        graph.addEdge("D", "C");
//        graph.addEdge("C", "E");
//
//        graph.addEdge("G", "E");
//        graph.addEdge("I", "H");

//        graph.addEdge("1", "5");
//        graph.addEdge("5", "10");
//        graph.addEdge("5", "4");
//        graph.addEdge("B", "E");
//
//        graph.addEdge("B", "I");
//        graph.addEdge("H", "B");
//
//        graph.addEdge("D", "C");
//        graph.addEdge("C", "E");
//
//        graph.addEdge("G", "E");
//        graph.addEdge("I", "H");
//        graph.addEdge("A", "B", 15);
//        graph.addEdge("C", "A", 25);
//        graph.addEdge("E", "F", 10);
//        graph.addEdge("B", "E", 10);
//        
//        graph.addEdge("B", "I", 25);
//        graph.addEdge("H", "B", 5);
//        
//        graph.addEdge("D", "C", 10);
//        graph.addEdge("C", "E", 20);
//        
//        graph.addEdge("G", "E", 5);
//        graph.addEdge("I", "H", 15);
        System.out.println("Loại đồ thị: " + (isDirectedGraph ? "có hướng" : "vô hướng"));
        System.out.println("Có trọng số: " + (isWeightedGraph ? "có" : "không"));
    }//GEN-LAST:event_createGraphActionPerformed

    // Duyệt DFS đệ quy
    private void dfs(int v, boolean[] visited) {
        visited[v] = true;
        Vertex A = graph.vertexList.get(v);
        for (Graph.Neighbor nbr : graph.vertexList.get(v).adjList) {
            if (!visited[nbr.vertexNum]) {
                Vertex B = graph.vertexList.get(nbr.vertexNum);
                drawEdge(A, B, nbr.weightNum, color4);
                traversalResult += (B.getName() + " ");
                try {
                    TimeUnit.SECONDS.sleep(1);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
                dfs(nbr.vertexNum, visited);
            }
        }
    }
    
    public void dfs(String name) {
        searched = true;
        boolean[] visited = new boolean[graph.vertexList.size()];
        int index = graph.indexForName(name);
        Vertex A = graph.vertexList.get(index);
        traversalResult += (A.getName() + " ");
        drawVertex(A.getName(), A.x, A.y, color4);
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
        dfs(index, visited);
    }

    public void print() {
        console.append("\n\nĐỉnh\t Đỉnh kề\n");
        for (int v = 0; v < graph.vertexList.size(); v++) {

            console.append("[" + graph.vertexList.get(v).name + "] ==> [");
            System.out.print(graph.vertexList.get(v).name);
            for (Neighbor nbr : graph.vertexList.get(v).adjList) {
                if (graph.vertexList.get(v).adjList.indexOf(nbr) == graph.vertexList.get(v).adjList.size() - 1) {
                    console.append(graph.vertexList.get(nbr.vertexNum).name);
                } else {
                    console.append(graph.vertexList.get(nbr.vertexNum).name + " , ");
                }

                System.out.print(" , " + graph.vertexList.get(nbr.vertexNum).name);
            }
            console.append("]\n");
//            console.append("\n");
            System.out.println("\n");
        }
    }

    ArrayList<Vertex> traceResult = new ArrayList<>();

    public void trace(Vertex O) {

        System.out.println(O.getName());
        traceResult.add(0,O);
        if (O.parent != null) {
            drawEdge(O.parent, O, color4);
            trace(O.parent);

        } else {
            printTrace(traceResult);
            return;
        }
    }

    public void printTrace(ArrayList<Vertex> traceResult) {
        String s = "";
        for (int j = 0; j < traceResult.size(); j++) {
            s += traceResult.get(j).name + " ";
        }

        this.traceResult.clear();
        System.out.println(s);
        console.append("\nKết quả tìm kiếm");
        console.append("\n" + s);
    }

    public void searchDFS(Vertex A, Vertex B) {
        drawGraph();
        if (A == B) {
            System.out.println("\n\nTìm thấy");
            trace(A);
            return;
        }

        ArrayList<Vertex> Open = new ArrayList<>();
        ArrayList<Vertex> Close = new ArrayList<>();

        Open.add(A);

        while (true) {
            if (Open.isEmpty()) {
                System.out.println("Tìm kiếm thất bại");
                console.append("\n\nTìm kiếm thất bại");
                return;
            }

            Vertex O = Open.get(0);
            Open.remove(0);
            Close.add(O);

            int position = 0;

            for (Neighbor nbr : O.adjList) {
                Vertex vertexTemp = graph.vertexList.get(nbr.vertexNum);
//                tmp.parent = O;
                int check1 = Open.indexOf(vertexTemp);
                int check2 = Close.indexOf(vertexTemp);

                if (check1 == -1 && check2 == -1) {
                    vertexTemp.parent = O;
                    if (vertexTemp.equals(B)) {
                        System.out.println("Tìm thấy");
                        console.append("\n\nTìm thấy");
                        trace(vertexTemp);
                        return;
                    }

                    Open.add(position, vertexTemp);
                    position += 1;
                }

            }
        }
    }

    private void doDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDFSActionPerformed
        // TODO add your handling code here:
//        result.setText("");
        traversalResult = "";
        if (searched) {
            drawGraph();
            try {
                TimeUnit.MILLISECONDS.sleep(500);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
        }

        Vertex A = graph.getVertex(startVertex.getText());
        if (A == null) {
            JOptionPane.showMessageDialog(null, "Đỉnh " + startVertex.getText() + " không tồn tại");
        } else {
            dfs(startVertex.getText());
        }

        console.append("\nThứ tự duyệt:\n" + traversalResult + "\n");
    }//GEN-LAST:event_doDFSActionPerformed

    private void addEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeActionPerformed
        // TODO add your handling code here:
        Vertex A = graph.getVertex(vertexA.getText());
        Vertex B = graph.getVertex(vertexB.getText());

        if (A == null) {
            JOptionPane.showMessageDialog(null, "Đỉnh " + vertexA.getText() + " không tồn tại");
        } else if (B == null) {
            JOptionPane.showMessageDialog(null, "Đỉnh " + vertexB.getText() + " không tồn tại");
        } else if (isWeightedGraph && weightNumber.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Trọng số không được để trống");
        } else {
            int weightNum = isWeightedGraph ? Integer.valueOf(weightNumber.getText()) : 0;
            drawEdge(A, B, weightNum, Color.WHITE);
            graph.addEdge(vertexA.getText(), vertexB.getText(), weightNum);
        }
    }//GEN-LAST:event_addEdgeActionPerformed

    private void repaintGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repaintGraphActionPerformed
        // TODO add your handling code here:
        drawGraph();
        searched = false;
    }//GEN-LAST:event_repaintGraphActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        graphPanel.repaint();
    }//GEN-LAST:event_clearActionPerformed

    //Đọc file 
    private void openFileExplorerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileExplorerActionPerformed
        // TODO add your handling code here:
        if (graph != null) {
            int choosen = JOptionPane.showConfirmDialog(null, "Tất cả thông tin trong đồ thị sẽ mất hết. Bạn có muốn tiếp tục?", "Xoá đồ thị", 0);
            if (choosen == JOptionPane.NO_OPTION) {
                return;
            }
            graphPanel.repaint();
        }
        isWeightedGraph = false;
        String currentDirectory = new File("").getAbsolutePath();
        JFileChooser fileChooser = new JFileChooser(currentDirectory);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath.setText(file.getAbsolutePath());
            Scanner sc = null;
            try {
                sc = new Scanner(file);
            } catch (FileNotFoundException ex) {
                System.err.println(ex.getMessage());
            }

            String graphType = sc.next();
            if (graphType.equals("directed")) {
                isDirectedGraph = true;
            }
            String weightedGraph = sc.next();
            if (weightedGraph.equals("weighted")) {
                isWeightedGraph = true;
            }

            graph = new Graph(isDirectedGraph, isWeightedGraph);
            int numberOfVerticals = sc.nextInt();

            for (int v = 0; v < numberOfVerticals; v++) {
                graph.addVertex(sc.next(), sc.nextInt(), sc.nextInt());
            }

            while (sc.hasNext()) {
                String vertexA = sc.next();
                String vertexB = sc.next();
                int weightNum = sc.nextInt();

                graph.addEdge(vertexA, vertexB, weightNum);
            }

            int num = graph.vertexList.get(graph.vertexList.size() - 1).name.charAt(0);
            if (num >= 65 && num <= 90) {
                vertexChar = graph.vertexList.get(graph.vertexList.size() - 1).name.charAt(0);
                vertexChar++;
                byName.setSelected(true);
            } else {
                vertexNum = Integer.parseInt(graph.vertexList.get(graph.vertexList.size() - 1).name) + 1;
                byNumber.setSelected(true);

            }
        }

        setEnable();
        drawGraph();
    }//GEN-LAST:event_openFileExplorerActionPerformed

    //Ghi file
    private void writeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeFileActionPerformed
        // TODO add your handling code here:
        if (graph.vertexList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Trong đồ thị chưa tồn tại đỉnh nào");
            return;
        }

        String currentDirectory = new File("").getAbsolutePath();
        JFileChooser fileChooser = new JFileChooser(currentDirectory);
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            FileWriter fileWriter = null;

            try {
                fileWriter = new FileWriter(file);
                System.out.println(graph.directed);
                String weighted = graph.isWeightedGraph ? "weighted" : "unweighted";
                if (graph.directed) {
                    fileWriter.write("directed " + weighted + "\n");
                } else {
                    fileWriter.write("undirected " + weighted + "\n");
                }

                int size = graph.vertexList.size();
                fileWriter.write(size + "\n");
                for (Vertex vertex : graph.vertexList) {
                    String name = vertex.getName();
                    int x = vertex.x;
                    int y = vertex.y;

                    fileWriter.write(name + " " + x + " " + y + "\n");

                }

                boolean[][] v = new boolean[size][size];
                for (int i = 0; i < size; i++) {
                    Vertex vertex = graph.vertexList.get(i);
                    String name = vertex.getName();

                    for (int j = 0; j < vertex.adjList.size(); j++) {

                        Neighbor nbr = vertex.adjList.get(j);
                        String neighborName = graph.vertexList.get(nbr.vertexNum).getName();
                        int index = graph.indexForName(neighborName);
                        int weightNumber = nbr.weightNum;

                        if (!v[i][index]) {
                            fileWriter.write(name + " " + neighborName + " " + weightNumber + "\n");
                            v[i][index] = true;
                            v[index][i] = true;
                        }
//                        if (i == (size - 1)) {
//                            if (j == (vertex.adjList.size() - 1)) {
//                                break;
//                            } else {
////                                fileWriter.write("\n");
//                            }
//                        } else {
//                            fileWriter.write("\n");
//                        }
                    }
                }
                fileWriter.close();

            } catch (IOException ex) {
                System.err.println(ex.getMessage());
            }

//            Scanner sc = null;
//            try {
//                sc = new Scanner(file);
//            } catch (FileNotFoundException ex) {
//                System.err.println(ex.getMessage());
//            }
//            
//            String graphType = sc.next();
//            if (graphType.equals("directed")) {
//                isDirectedGraph = true;
//            }
//            graph = new Graph(isDirectedGraph, isWeightedGraph);
//            int numberOfVerticals = sc.nextInt();
//
//            // read vertices
//            for (int v = 0; v < numberOfVerticals; v++) {
//                graph.addVertex(sc.next(), sc.nextInt(), sc.nextInt());
//            }
//            
//            while (sc.hasNext()) {
//                String vertexA = sc.next();
//                String vertexB = sc.next();
//                int weightNum = sc.nextInt();
//                
//                graph.addEdge(vertexA, vertexB, weightNum);
//            }
        }
    }//GEN-LAST:event_writeFileActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
//        Vertex A = graph.getVertex("1");
//        Vertex B = graph.getVertex("2");
        Vertex A = graph.getVertex(fromA.getText());
        Vertex B = graph.getVertex(toB.getText());

        if (A == null) {
            JOptionPane.showMessageDialog(null, "Đỉnh " + vertexA.getText() + " không tồn tại");
        } 
//        else if (B == null) {
//            JOptionPane.showMessageDialog(null, "Đỉnh " + vertexB.getText() + " không tồn tại");
//        } 
//        else if (isWeightedGraph && weightNumber.getText().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Trọng số không được để trống");
//        } 
        else {
        searchDFS(A, B);
        }


    }//GEN-LAST:event_searchActionPerformed

    private void clear2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear2ActionPerformed
        // TODO add your handling code here:
        console.setText("");
    }//GEN-LAST:event_clear2ActionPerformed

    private void clear3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear3ActionPerformed
        // TODO add your handling code here:
        print();
    }//GEN-LAST:event_clear3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEdge;
    private javax.swing.JButton addVertex;
    private javax.swing.JRadioButton byName;
    private javax.swing.JRadioButton byNumber;
    private javax.swing.JButton clear;
    private javax.swing.JButton clear2;
    private javax.swing.JButton clear3;
    private javax.swing.JButton clearGraph;
    private javax.swing.JTextArea console;
    private javax.swing.JButton createGraph;
    private javax.swing.JRadioButton directed;
    private javax.swing.JButton doDFS;
    private javax.swing.JTextField filePath;
    private javax.swing.JTextField fromA;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JPanel graphPanel1;
    private javax.swing.ButtonGroup graphTypeGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox lock;
    private javax.swing.JButton openFileExplorer;
    private javax.swing.JButton repaintGraph;
    private javax.swing.JButton search;
    private javax.swing.JTextField startVertex;
    private javax.swing.JTextField toB;
    private javax.swing.JRadioButton undirected;
    private javax.swing.JTextField vertexA;
    private javax.swing.JTextField vertexB;
    private javax.swing.JTextField vertexNameInput;
    private javax.swing.JTextField vertexNumber;
    private javax.swing.ButtonGroup vertexType;
    private javax.swing.JTextField weightNumber;
    private javax.swing.JCheckBox weightedGraph;
    private javax.swing.JButton writeFile;
    // End of variables declaration//GEN-END:variables
}
